facet_grid(~Island, scales = "free_x", space = 'free')
st_full_plot_all
# ggsave("./06-publication/main_figures/Figure_1/st_full_plot_all.svg", plot = st_full_plot_all, device = "svg",
#        scale = 1, width = 16, height = 5, units = c("in"), dpi = 300)
# read in full table for sourcetracker
source_table <- fread("05-Documentation.backup/oceania_sourcetracker_table_species.txt") %>%
rename(Species = 1)
# read in rarefied table for sourcetracker
source_table_rarefied <- fread("05-Documentation.backup/oceania_sourcetracker_table_species_rarefied.txt") %>%
rename(Species = 1)
# read in rarefied blanks table (note LIB027.A0136 was removed b/c it had too few reads)
blank_table_rarefied <- fread("05-Documentation.backup/oceania_sourcetracker_table_blanks_species_rarefied.tsv") %>%
rename(Species = 1)
# read in poor samples from cuperdec species
poor_samples <- fread("05-Documentation.backup/oceania_cuperdec_species_poor_samples.tsv") %>%
pull()
full_source_table <- fread("./05-Documentation.backup/oceania_malt_cRefSeq_summarized_species_20201105.txt") %>%
rename(Species = 1) %>%
full_join(., fread("./05-Documentation.backup/sources_MALT_cRefSeq_JFY_species_summarized.txt") %>%
rename(Species = 1) %>%
select(matches("Species|SRR|ERR|ARS")) %>%
select(-matches("SRR059425|SRR1761692|SRR1761697|SRR1761710|SRR1761718")), by = "Species") %>%
full_join(., fread("./05-Documentation.backup/oceania_malt_blanks_cRefSeq_species_summarized_20201130.txt") %>%
rename(Species = 1), by = "Species") %>%
full_join(., fread("./05-Documentation.backup/oceania_malt_bones_cRefSeq_species_summarized_20201202.txt") %>%
rename(Species = 1), by = "Species") %>%
full_join(., fread("./05-Documentation.backup/deep_evo_malt_refseq_comparison_species.tsv") %>%
rename(Species = 1) %>%
select(matches("Species|JAE006|JAE007|JAE008|JAE009|JAE012|VLC001|VLC002|VLC003|VLC004|VLC005")), by = "Species") %>%
filter(!str_detect(Species, "Homo")) %>%
# remove HPD samples
select(-matches("HPD"))
# clean the file names
colnames(full_source_table) <- gsub("MeganServer::", "", colnames(full_source_table))
colnames(full_source_table) <- gsub(".unmapped", "", colnames(full_source_table))
colnames(full_source_table) <- gsub(".SG1.1", "", colnames(full_source_table))
colnames(full_source_table) <- gsub(".SG1.2", "", colnames(full_source_table))
colnames(full_source_table) <- gsub("_L001_R1_001.fastq.combined.fq.prefixed.extractunmapped.bam", "", colnames(full_source_table))
colnames(full_source_table) <- gsub("_S0_L000_R1_000.fastq.merged.prefixed.hg19unmapped", "", colnames(full_source_table))
colnames(full_source_table) <- gsub("_S0_L001_R1_001.fastq.truncated.prefixed.extractunmapped.bam", "", colnames(full_source_table))
colnames(full_source_table) <- gsub("_S0_L001_R1_000.fastq.merged.prefixed.hg1", "", colnames(full_source_table))
colnames(full_source_table) <- gsub("_S0_L000_R1_000.fastq.merged.prefixed.hg1", "", colnames(full_source_table))
colnames(full_source_table) <- gsub(".SG1.2_S0_L003_R1_001.fastq.combined.fq.prefixed.extrac.bam", "", colnames(full_source_table))
colnames(full_source_table) <- gsub("_S0_L003_R1_001.fastq.combined.fq.prefixed.extrac.bam", "", colnames(full_source_table))
# replace all NA with 0
full_source_table <- full_source_table %>%
replace(is.na(.), 0) %>%
pivot_longer(!Species, names_to = "Library_ID", values_to = "Counts") %>%
arrange(Library_ID) %>%
pivot_wider(names_from = "Library_ID", values_from = "Counts")
# do we need to filter out bones?
bones <- pacific_metadata %>%
filter(Type == "bone") %>%
select(Library_ID, Lab, Type) %>%
filter(!str_detect(Library_ID, "ARS|HPD"))
blanks <- pacific_metadata %>%
filter(Type == "blank") %>%
pull(Library_ID)
map_file <- mapfile %>%
mutate(Env = str_replace_all(Env, "calculus","Pacific calculus"),
Env = str_replace_all(Env, "modernCalculus","Mod. calculus"),
Env = str_replace_all(Env, "rural",""),
Env = str_replace_all(Env, "urban",""),
Env = str_replace_all(Env, "sediment","Sediment"),
Env = str_replace_all(Env, "skin","Skin"),
Env = str_replace_all(Env, "sub",""),
Env = str_replace_all(Env, "sup",""),
Env = str_replace_all(Env, "archBone","Arch. bone")) %>%
rename(Library_ID = 1) %>%
full_join(., pacific_metadata %>%
filter(Type == "blank") %>%
select(Library_ID, Type) %>%
rename(Env = Type)) %>%
mutate(Env = str_replace_all(Env, "blank","Blank"))
# add functions for:
# making the input table for PCA?
# plotting PCA with colored dots
plot_pca <- function(df, pc1, pc2, color_group) {
metadata_group_colors <- get(paste(color_group, "_colors", sep = ""))
exp_var <- paste0(round(df$prop_expl_var$X * 100, 2), "%")
df_X <- df$variates$X %>%
as.data.frame() %>%
rownames_to_column("Library_ID") %>%
left_join(map_file, by = "Library_ID") %>%
# the woorld samples won't have an Env, so make one
mutate(Env = ifelse(is.na(Env),"Anc. calculus",Env))
color_group = df_X[[color_group]]
if (pc1 == 'PC1') {
pc1 <- df_X$PC1
exp_var_pc1 <- exp_var[1]
xaxis <- c("PC1")
}  else if (pc1 == 'PC2') {
pc1 <- df_X$PC2
exp_var_pc1 <- exp_var[2]
xaxis <- c("PC2")
} else if (pc1 == 'PC3') {
pc1 <- df_X$PC3
exp_var_pc1 <- exp_var[3]
xaxis <- c("PC3")
}
if (pc2 == 'PC1') {
pc2 <- df_X$PC1
exp_var_pc2 <- exp_var[1]
yaxis <- c("PC1")
}  else if (pc2 == 'PC2') {
pc2 <- df_X$PC2
exp_var_pc2 <- exp_var[2]
yaxis <- c("PC2")
} else if (pc2 == 'PC3') {
pc2 <- df_X$PC3
exp_var_pc2 <- exp_var[3]
yaxis <- c("PC3")
}
pca_plot <- ggplot(df_X, aes(pc1, pc2)) +
geom_point(aes(fill = color_group, shape = shape_group), size = 4, stroke = 0.3, shape = 21) +
scale_fill_manual(values = metadata_group_colors) +
xlab(paste(xaxis, " - ", exp_var_pc1)) +
ylab(paste(yaxis, " - ", exp_var_pc2)) +
theme_minimal(base_size = 14) +
theme(legend.position = "right") +
theme(legend.title = element_blank())
return(pca_plot)
}
# contaminants
mid_contaminants <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/contaminant_species_mid.tsv", sep = "\t")
iber_contaminants <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/contaminant_species_iber.tsv", sep = "\t")
rad_contaminants <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/contaminant_species_rad.tsv", sep = "\t")
kil_contaminants_freq <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/contaminant_species_kil.tsv", sep = "\t")
ei_contaminants <- fread("./05-Documentation.backup/contaminant_eisenhoffer_sp.tsv", sep = "\t")
ot_contaminants <- fread("./05-Documentation.backup/contaminant_ottoni_sp.tsv", sep = "\t")
de_contaminants <- fread("./05-Documentation.backup/contaminant_deepevo_sp.tsv", sep = "\t")
mw_contaminants <- fread("./05-Documentation.backup/contaminant_mw2018_sp.tsv")
# and the pacific contaminants
cont_all_sp <- fread("./05-Documentation.backup/contaminant_pacific_ooj_sp.tsv", sep = "\t", fill = T) %>%
select(Species)
# poorly-preserved samples
world_fail <- fread("./05-Documentation.backup/cuperdec_malt_ei_ot_de_poor_samples.tsv")
# MALT tables
mid_raw <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/MID_malt_bactarchhomo2018_comparison-species.txt")
radcliffe_raw <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/Radcliffe_pfuT_comparison-species.txt")
kilteasheen_raw <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/Kilteasheen_comparison-species.txt")
iberian_raw <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/iberian_medieval_malt_species_raw.tsv")
ei2020_raw <- fread("./05-Documentation.backup/eisenhoffer2020_malt_refseq_species.tsv")
ot2021_raw <- fread("./05-Documentation.backup/ottoni2021_malt_refseq_species.tsv")
de_raw <- fread("./05-Documentation.backup/deep_evo_malt_refseq_comparison_species.tsv")
mw_raw <- fread("./05-Documentation.backup/mann2018_world_malt_refseq_comparison_species.tsv")
calc_full_metadata <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/00-documentation.backup/full_combined_metadata.tsv") %>%
select(Library_ID, Site_code, seq_len_avg, gc_avg, No_reads_no_human) %>%
mutate(Study = str_replace_all(Site_code, "MID","Middenbeemster"),
Study = str_replace_all(Study, "CMB","Middenbeemster"),
Study = str_replace_all(Study, "KIL","Kilteasheen"),
Study = str_replace_all(Study, "RAD","Radcliffe"),
Study = str_replace_all(Study, "ELR","Iberia"),
Study = str_replace_all(Study, "IVE","Iberia"),
Lab = str_replace_all(Site_code, "MID","Jena"),
Lab = str_replace_all(Lab, "CMB","Jena"),
Lab = str_replace_all(Lab, "ELR","Jena"),
Lab = str_replace_all(Lab, "IVE","Jena"),
Lab = str_replace_all(Lab, "RAD","Oxford"),
Lab = str_replace_all(Lab, "KIL","Tuebingen")) %>%
mutate(Age_mean = ifelse(str_detect(Site_code, "MID|CMB|RAD"), 250,
ifelse(Site_code == "KIL", 700,
ifelse(str_detect(Site_code, "ELR|IVE"), 620, 7)))) %>%
full_join(., fread("./05-Documentation.backup/eisenhoffer2020_ottoni2021_deepevo_mann2018w_metadata.tsv") %>%
mutate(Run_accession = ifelse(Study == "FellowsYates2021",Sample_alias,Run_accession)) %>%
rename(Library_ID = Run_accession)) %>%
mutate(Sample_type = ifelse(str_detect(Study, "EXB|LIB|DEN|SOL"),"blank",Sample_type)) %>%
mutate(Sample_type = ifelse(is.na(Sample_type),"calculus",Sample_type)) %>%
mutate(Sample_group = ifelse(Sample_type == "blank","blank",
ifelse(str_detect(Library_ID, "VLC|JAE"),"modern_calculus",Sample_group))) %>%
mutate(Sample_group = ifelse(is.na(Sample_group),"ancient_calculus",Sample_group)) %>%
mutate(Sample_alias = ifelse(is.na(Sample_alias),Library_ID,Sample_alias)) %>%
mutate(Age_mean_log = log10(Age_mean))
world_metadata <- calc_full_metadata %>%
# mutate(Sample_group = ifelse(is.na(Sample_group),"bone",Sample_group)) %>%
filter(!str_detect(Sample_group, "primate|modern"))
# list the non-human primates and modern calculus to remove from the species table
nhp <- calc_full_metadata %>%
filter(str_detect(Sample_group, "primate|modern")) %>%
select(Sample_alias) %>%
unique() %>%
pull()
# combine raw tables and decontaminate with a list of all contaminants in all samples
pe_all_table <- full_source_table %>%
full_join(., mid_raw %>%
rename(Species = `#Datasets`) %>%
# remove blanks
select(-matches("EXB|LIB")) %>%
full_join(., radcliffe_raw %>%
rename(Species = `#Datasets`) %>%
# remove blanks
select(-`CSD.unmapped`, -`CSL.unmapped`, -`CSN.unmapped`, -`CSS.unmapped`)) %>%
full_join(., kilteasheen_raw %>%
rename(Species = `#Datasets`)) %>%
full_join(., mw_raw %>%
rename(Species = `#Datasets`)) %>%
full_join(., iberian_raw %>%
rename(Species = `#Datasets`) %>%
# remove blanks
select(-matches("EXB|LIB"))) %>%
full_join(., ei2020_raw %>%
rename(Species = `#Datasets`) %>%
# remove blanks
select(-`SRR11176637.unmapped`, -`SRR11176643.unmapped`)) %>%
full_join(., ot2021_raw %>%
rename(Species = `#Datasets`) %>%
# remove blanks
select(-`ERR5729658.unmapped`, -`ERR5729659.unmapped`, -`ERR5729660.unmapped`, -`ERR5729661.unmapped`)) %>%
full_join(., de_raw %>%
rename(Species = `#Datasets`) %>%
select(-matches(nhp %>% str_c(collapse = "|")))) %>%
# remove blanks, dentin and soil
select(-matches("CSS|CSD|EXB|LIB|CSN|CSL")), by = "Species") %>%
anti_join(.,  mid_contaminants %>%
bind_rows(., rad_contaminants) %>%
bind_rows(., kil_contaminants_freq) %>%
bind_rows(., iber_contaminants) %>%
bind_rows(., ei_contaminants) %>%
bind_rows(., ot_contaminants) %>%
bind_rows(., de_contaminants) %>%
bind_rows(., mw_contaminants) %>%
bind_rows(., cont_all_sp) %>% # pacific contaminants already combinded and de-duplicated
distinct(), by = "Species") %>%
replace(is.na(.), 0) %>%
# remove any species that have no counts after removing the blanks
adorn_totals(where = "col") %>%
filter(Total > 0) %>%
select(-Total)
# remove the totals attribute so the column totals can be calculated again later
attr(pe_all_table, "totals") <- NULL
colnames(pe_all_table) <- gsub(".unmapped","", colnames(pe_all_table))
colnames(pe_all_table) <- gsub("MeganServer::","", colnames(pe_all_table))
pe_all_table <- pe_all_table %>%
# remove poorly-preserved samples
select(-matches(world_fail %>% pull(Sample) %>% str_c(collapse = "|"))) %>%
# remove any species that have no counts after removing the poorly-preserved samples
adorn_totals(where = "col") %>%
filter(Total > 0) %>%
select(-Total)
# remove the totals attribute so the column totals can be calculated again later
attr(pe_all_table, "totals") <- NULL
# remove Gut samples
gut <- map_file %>%
filter(Env == "Gut") %>%
select(Library_ID) %>%
pull()
full_source_table_1 <- pe_all_table %>%
select(-matches(gut %>% str_c(collapse = "|"))) %>%
adorn_totals(where = "col") %>%
mutate(Percent = Total / sum(Total) * 100) %>%
filter(Percent >= 0) %>%
# filter(Percent >= 0.005) %>%
select(-Total, -Percent) %>%
pivot_longer(!Species, names_to = "Library_ID", values_to = "Counts") %>%
mutate(Counts = Counts + 1) %>%
spread(Species,Counts) %>%
column_to_rownames("Library_ID")
# check the number of components to retain by tuning the PCA
tune.pca(full_source_table_1, logratio = 'CLR')
# perform a PCA to see how the data cluster
full_source_table_1.pca <- pca(full_source_table_1, ncomp = 3, logratio = 'CLR')
# now remove cuperdec failed samples
full_source_table_1_good <- pe_all_table %>%
select(-matches(gut %>% str_c(collapse = "|"))) %>%
select(-matches(poor_samples %>% str_c(collapse = "|"))) %>%
adorn_totals(where = "col") %>%
mutate(Percent = Total / sum(Total) * 100) %>%
filter(Percent >= 0) %>%
# filter(Percent >= 0.005) %>%
select(-Total, -Percent) %>%
pivot_longer(!Species, names_to = "Library_ID", values_to = "Counts") %>%
mutate(Counts = Counts + 1) %>%
spread(Species,Counts) %>%
column_to_rownames("Library_ID")
# check the number of components to retain by tuning the PCA
tune.pca(full_source_table_1_good, logratio = 'CLR')
# perform a PCA to see how the data cluster
full_source_table_1_good.pca <- pca(full_source_table_1_good, ncomp = 3, logratio = 'CLR')
# plot the PCA
fs_good_pc12 <- plot_pca(full_source_table_1_good.pca, "PC1", "PC2", "Env")
fs_good_pc12
# ggsave("./06-publication/main_figures/Figure_1/source_pca_species_clean.svg", plot = fs_good_pc12, device = "svg",
#        scale = 1, width = 10, height = 5, units = c("in"), dpi = 300)
#
# ggsave("./06-publication/main_figures/Figure_1/source_pca_species_clean.pdf", plot = fs_good_pc12, device = "pdf",
#        scale = 1, width = 10, height = 5, units = c("in"), dpi = 300)
metadata_full <- fread("05-Documentation.backup/oceania_metadata_full.tsv") %>%
full_join(., fread("./05-Documentation.backup/oceana_climate.tsv")) %>%
# this sample has no information so we'll remove it
filter(Library_ID != "HCLVMBCX2-3505-26-00-01_S26")
cfdp_fail <- fread("05-Documentation.backup/cfdp_fail_samples_20210413.txt") %>%
rename(Library_ID = 1)
# list all samples to include
sample_list <- metadata_full %>%
anti_join(., cfdp_fail) %>%
filter(Library_ID != "HCLVMBCX2-3505-13-00-01_S13",
Library_ID != "HCLVMBCX2-3505-17-00-01_S26") %>%
filter(Type == "calculus",
!str_detect(Library_ID, "HPD")) %>%
select(Library_ID)
# from the SourceTracker table
calc_condensed <- full_source_results %>%
pivot_longer(!SampleID, names_to = "Source", values_to = "Prop") %>%
mutate(Group = ifelse(str_detect(Source, "Calculus|Plaque"),"Oral",
ifelse(str_detect(Source, "Gut"),"Gut",Source))) %>%
group_by(SampleID,Group) %>%
summarize(topprop = sum(Prop)) %>%
ungroup()  %>%
filter(Group == "Oral") %>%
mutate(Percent = topprop * 100)
# read in the table from Posth, et al. 2018
human_pacific <- fread("./05-Documentation.backup/posth_2018_supp_table_S3_human_endo.tsv")
# assume value is percent
human_pacific_liu <- fread("./05-Documentation.backup/liu2022_supp_table_S2_human_endo.tsv") %>%
mutate(Pct = as.numeric(`Endogenous by Libraries`)) %>%
rename(Sample = `Individual ID`) %>%
group_by(Sample) %>%
summarize(Percent  = mean(Pct))
human_condensed <- human_pacific %>%
select(Sample, `End. DNA Shotgun (%)`) %>%
rename(Percent = `End. DNA Shotgun (%)`)  %>%
bind_rows(., human_pacific_liu)
comb_pacific <- calc_condensed %>%
select(-Group, -topprop) %>%
rename(Sample = SampleID) %>%
mutate(Type = "Calculus") %>%
bind_rows(., human_condensed %>%
select(Sample, Percent) %>%
mutate(Type = "Human"))
comb_pacific %>%
count(Type)
require("scales")
pacific_plot <- comb_pacific %>%
group_by(Type) %>%
arrange(desc(Percent)) %>%
mutate(Sample = fct_relevel(Sample, Sample)) %>%
arrange(Type) %>%
# mutate(Percent = Percent + 1) %>%
ggplot(., aes(x = Sample, y = Percent, fill = Type)) +
geom_bar(stat = "identity", color = "grey30", size = 0.2) +
scale_fill_manual(values = c("#7d3560","#148f77")) +
theme_minimal() +
# scale_y_log10(breaks = c(1, 10, 25, 50, 100)) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10),  breaks = c(0.1, 1, 10, 50, 100)) +
# theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.x = element_blank()) +
theme(panel.grid.major.x = element_blank()) +
# theme(panel.grid.minor.y = element_blank()) +
# geom_hline(yintercept = 50, linetype = "dotted") +
xlab("Sample") +
ylab("Endogenous DNA (%)")
pacific_plot
# read in the SourceTracker table
calculus_england <- fread("https://raw.githubusercontent.com/ivelsko/smoking_calculus/main/05-results.backup/sink_predictions_full_sources_rarefied_51500.tsv")
calc_england_condensed <- calculus_england %>%
filter(str_detect(SampleID, "CS|MID"),
!str_detect(SampleID, "CSS|CSN|CSD|CSL")) %>%
pivot_longer(!SampleID, names_to = "Source", values_to = "Prop") %>%
mutate(Group = ifelse(str_detect(Source, "Calculus|Plaque"),"Oral",
ifelse(str_detect(Source, "Gut"),"Gut",Source))) %>%
group_by(SampleID,Group) %>%
summarize(topprop = sum(Prop)) %>%
ungroup()  %>%
filter(Group == "Oral") %>%
mutate(Percent = topprop * 100)
# read in the table from Schiffels, et al. 2016
human_england <- fread("./05-Documentation.backup/schiffels_2016_supp_table_S1_human_endo.tsv")
human_england_condensed <- human_england %>%
select(Library_ID, `%_endog_DNA`) %>%
rename(Percent = `%_endog_DNA`) %>%
mutate(Percent = str_replace_all(Percent, "%","")) %>%
mutate(Percent = as.numeric(Percent))
# read in the table from Patterson, et al. 2021
human_england_netherlands <- fread("./05-Documentation.backup/patterson2021_supp_table_S1_human_endo.tsv")  %>%
rename(Sample = 1,
Percent = shotgun_pct_endo) %>%
filter(!str_detect(Percent, "shotgun")) %>%
mutate(Percent = as.numeric(Percent)) %>%
group_by(Sample, Country) %>%
summarize(Percent = mean(Percent)) %>%
ungroup()
comb_europe <- calc_england_condensed %>%
select(-Group, -topprop) %>%
rename(Sample = SampleID) %>%
mutate(Type = "Calculus") %>%
bind_rows(., human_england_condensed %>%
select(Library_ID, Percent) %>%
mutate(Type = "Human") %>%
rename(Sample = Library_ID)) %>%
full_join(., human_england_netherlands %>%
select(-Country) %>%
mutate(Type = "Human")) %>%
drop_na(Percent)
comb_europe %>%
count(Type)
require("scales")
europe_plot <- comb_europe %>%
group_by(Type) %>%
arrange(desc(Percent)) %>%
mutate(Sample = fct_relevel(Sample, Sample)) %>%
arrange(Type) %>%
# mutate(Percent = Percent + 1) %>%
ggplot(., aes(x = Sample, y = Percent, fill = Type)) +
geom_bar(stat = "identity", color = "grey30", size = 0.2) +
scale_fill_manual(values = c("#7d3560","#148f77")) +
theme_minimal() +
# scale_y_log10(breaks = c(1, 10, 25, 50, 100)) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10),  breaks = c(0.1, 1, 10, 50, 100)) +
# theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.x = element_blank()) +
theme(panel.grid.major.x = element_blank()) +
# theme(panel.grid.minor.y = element_blank()) +
# geom_hline(yintercept = 50, linetype = "dotted") +
xlab("Sample") +
ylab("Endogenous DNA (%)")
europe_plot
wrap_plot <- comb_pacific %>%
mutate(Site = "Pacific") %>%
full_join(., comb_europe %>%
mutate(Site = "Europe")) %>%
group_by(Type) %>%
arrange(desc(Percent)) %>%
mutate(Sample = fct_relevel(Sample, Sample)) %>%
arrange(Type) %>%
# mutate(Percent = Percent + 1) %>%
ggplot(., aes(x = Sample, y = Percent, fill = Type)) +
geom_bar(stat = "identity", color = "grey30", size = 0.2) +
scale_fill_manual(values = c("#7d3560","#148f77")) +
theme_minimal() +
# scale_y_log10(breaks = c(1, 10, 25, 50, 100)) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10),  breaks = c(0.1, 1, 10, 50, 100)) +
# theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.x = element_blank()) +
theme(panel.grid.major.x = element_blank(),
strip.text = element_blank()) +
# theme(panel.grid.minor.y = element_blank()) +
# geom_hline(yintercept = 50, linetype = "dotted") +
xlab("Sample") +
ylab("Endogenous DNA (%)") +
facet_wrap(Site~Type, scales = "free_x")
wrap_plot
# ggsave("./06-publication/main_figures/Figure_1/endo_dna_preservation.svg", plot = wrap_plot, device = "svg",
#        scale = 1, width = 10, height = 5, units = c("in"), dpi = 300)
# Sink predictions
sink <- read.delim("./05-Documentation.backup/sink_predictions_species.txt")
# Load climate data
climate <- readxl::read_excel("./05-Documentation.backup/oceania_climate.xlsx")
# Load metadata
meta <- read_tsv("./05-Documentation.backup/oceania_metadata.txt")
# Subset ST to only oral microbiomes, and combine
sink <- sink %>%
select(SampleID, modernCalculus, subPlaque, supPlaque)
sink$oral_microbiome <- rowSums(sink[,2:4] )
sink_oral <- sink %>%
select(SampleID, oral_microbiome)
# Combine metadata, ST and climate data
meta_sink <- left_join(sink_oral,meta, by=c("SampleID"="LibraryID3"))
climate_sink <- left_join(meta_sink, climate)
# Remove blanks
climate_sink <- climate_sink %>%
filter(!Type == "blank")
# Remove repeats of SIG samples
climate_sink <- climate_sink %>%
filter(!SampleID %in% c("SIG040.A0201", "SIG046.A0201"))
oral_plot <- ggplot(climate_sink, aes(x=reorder(Island, oral_microbiome), y=oral_microbiome)) + #
geom_boxplot(outlier.shape=NA) +
geom_jitter(shape=16, position=position_jitter(0.1), aes(color=Age_mean)) +
scale_colour_gradient(low="#098BD9", high="#7D3560") +
xlab("") +
theme_minimal() +
theme(axis.text.x = element_blank())
rain_plot <- ggplot(climate_sink, aes(x=reorder(Island, oral_microbiome), y=Rainfall,  group=1)) +
geom_line() +
geom_point() +
xlab("") +
theme_minimal() +
theme(axis.text.x = element_blank())
temp_plot <- ggplot(climate_sink, aes(x=reorder(Island, oral_microbiome), y=Temperature,  group=1)) +
geom_line() +
geom_point() +
xlab("") +
theme_minimal() +
theme(axis.text.x = element_blank())
evapo_plot <- ggplot(climate_sink, aes(x=reorder(Island, oral_microbiome), y=ann_evapotransporation,  group=1)) +
geom_line() +
geom_point() +
xlab("") +
theme_minimal()
# Load data
human <- readxl::read_excel("./05-Documentation.backup/humand_dna.xlsx")
colnames(human)[3] <- "human_dna"
human <- human %>%
full_join(., meta %>% select(Island) %>% unique() %>% drop_na(Island), by = "Island")
human_plot <- human %>%
filter(!str_detect(Island, "Viti_Levu|Taumako_Duff_Islands")) %>%
mutate(Island = fct_relevel(Island, "Viti_levu","Watom","Uripiv","Efate_3000","Futuna","Vao","Rapa_Nui","Taumako","Flores","Efate","Raiatea","Tongatapu"))  %>%
arrange(Island) %>%
ggplot(., aes(x=Island, y=human_dna)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter(shape=16, position=position_jitter(0.1)) +
xlab("") +
theme_minimal()
human_plot
# put together with patchwork
pres_plot <- oral_plot / rain_plot / temp_plot / evapo_plot / human_plot
pres_plot
# ggsave("./06-publication/main_figures/Figure_1/linear_modeling_preservation.svg", plot = pres_plot, device = "svg",
#        scale = 1, width = 7, height = 5, units = c("in"), dpi = 300)
ggsave("./06-publication/main_figures/Figure_1/linear_modeling_preservation.svg", plot = pres_plot, device = "svg",
scale = 1, width = 7, height = 5, units = c("in"), dpi = 300)
pres_plot
q()
